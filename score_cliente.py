# ==================================================
# Bibliotecas Necess√°rias
# ==================================================
import pandas as pd
import streamlit as st
from PIL import Image
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score


#-------------------------------------In√≠cio das Fun√ß√µes-----------------------------------

st.set_page_config(page_title='score_clientes', page_icon='üìà', layout='wide') 

# ==================================================
# 
# Import Dataset
# ==================================================
df=pd.read_csv('clientes.csv')

# ==================================================
# Logo
# ==================================================
image=Image.open('logo.png')
st.sidebar.image(image, width=350)

# ==================================================
# Layout no Streamliy
# ==================================================
with st.container():
    st.markdown('# Projeto Score de Cr√©dito de Clientes- Dashbord')
    st.markdown('''___''')
    
    st.markdown(
        """
        ## - An√°lise de Score dos Clientes em um Banco
        <span style="font-size:22px;">
        Vamos verificar as informa√ß√µes em uma base de dados de 100.000 clientes,  verificando atrav√©s do score (pontua√ß√£o) se √© um bom cliente ou n√£o.<br>
        Com isso vamos poder propor uma solu√ß√£o para o banco se deve emprestar dinheiro, se ele vai ter cr√©dito entre outros benef√≠cios dentro do banco.<br>
        √â importante fazer de fato uma an√°lise de dados para que possa tirar conclus√µes utilizando os n√∫meros como refer√™ncia, sendo um passo muito importante essa an√°lise de dados para tomadas de decis√µes.<br>
        O objetivo √© fazer um tratamento na base de dados e criar alguns algoritmos de classifica√ß√£o e verificar qual deles √© o melhor.<br>
        Temos algumas colunas com o tipo de informa√ß√£o ‚Äúobject‚Äù. Isso na verdade √© um texto, s√≥ que os modelos de classifica√ß√£o n√£o conseguem trabalhar com
        textos. Vai ser feito um tratamento nessas colunas antes de continuar com o nosso projeto.</span>
        """,unsafe_allow_html=True)
st.markdown('''___''')
   

with st.container():
    
    st.markdown("## - Visualiza√ß√£o das Colunas")
    
    st.success(
    """
   - Um ponto importante para se observar, √© que tem algumas colunas com o tipo de informa√ß√£o ‚Äúobject‚Äù como podemos vizualizar na primeira tabela. 
   Isso na verdade √© um texto, s√≥ que os modelos de classifica√ß√£o n√£o conseguem trabalhar com textos. (profissao, mix_credito, comportamento_pagamento e score_credito)
   
   - Ent√£o vai ser necessario fazer um tratamento nessas colunas antes de continuar com o projeto, podemos vizualizar o tratamento na segunda tabela.
   
   - S√≥ n√£o vai ser aplicado na coluna de score_credito que √© o objetivo do projeto.
    """)

def info_all_columns(df):
    data = []
    for col in df.columns:
        data.append({
            'Coluna': col,
            'Tipo': df[col].dtype,
            'Valores √∫nicos': df[col].nunique(),
            'Valores ausentes': df[col].isnull().sum(),
            'Valores n√£o nulos': df[col].count()
        })
    
    info_df = pd.DataFrame(data)
    return info_df

col1, col2 = st.columns(2)

with col1:
    # Exibir informa√ß√µes antes da modifica√ß√£o
    st.markdown("### 1 - Informa√ß√µes das colunas antes da modifica√ß√£o")
    st.dataframe(info_all_columns(df), height=910, width=710)


# Copiar o DataFrame original para preserv√°-lo
df_original = df.copy()

# Codificar as colunas 'profissao', 'mix_credito' e 'comportamento_pagamento'
codificador = LabelEncoder()
colunas_a_codificar = ['profissao', 'mix_credito', 'comportamento_pagamento']
for coluna in colunas_a_codificar:
    if df[coluna].dtype == 'object':
        df[coluna] = codificador.fit_transform(df[coluna])

with col2:
    # Exibir informa√ß√µes ap√≥s a modifica√ß√£o
    st.markdown("### 2 - Informa√ß√µes das colunas ap√≥s a modifica√ß√£o")
    st.dataframe(info_all_columns(df), height=910, width=710)
    
st.markdown('''___''')
  
st.markdown("## - Treinar o Modelo")  
st.success(
""" - Escolher quais colunas vai ser utilizada para treinar o nosso modelo de classifica√ß√£o, que √© o modelo que vai
pegar algumas das informa√ß√µes que temos (vamos separar em treino e teste).

- Isso quer dizer que vamos separar nossa base de dados em 2, uma base de treino, para treinar o nosso modelo para que ele
consiga fazer as previs√µes. E uma base de teste, que √© a base que vamos utilizar para ver como est√° fazendo essa previs√£o.

- √â importante fazer essa separa√ß√£o, porque n√£o faz muito sentido utilizar a mesma base para treinar e para testar, pois isso pode
levar o modelo a ‚Äúgravar‚Äù os resultados e acabar n√£o fazendo uma previs√£o correta. Com essa separa√ß√£o podemos de fato verificar
qu√£o bem o modelo prev√™ o score dos nossos clientes.

- y √© a coluna que queremos que o modelo calcule ("score_credito")

- x vai todas as colunas que vamos usar para prever o score de credito, n√£o vamos usar a coluna id_cliente porque ela √© um numero qualquer que nao ajuda a previsao.
""" )
      
# Treinar o Modelo
x=df.drop(['score_credito', 'id_cliente'], axis=1)
y=df['score_credito']
x_treino, x_teste, y_treino, y_teste=train_test_split(x, y, test_size=0.3, random_state=1)

st.markdown('''___''')

st.markdown("## - Treinando os Modelos")

st.success(
""" - Depois de ter feito o passo para separar a base de dados em treino e teste vai ser importado 2 modelos de classifica√ß√£o para
trein√°-los e verificar qual deles tem o melhor resultado para esse caso.

- N√£o quer dizer que um modelo sendo melhor nesse caso, vai ser melhor para todos os casos. Como cada projeto √©
diferente eles ter√£o resultados diferentes.

- Para esse projeto vai ser utilizado o Modelo √Årvore de Decis√£o (RandomForestClassifier) e o Modelo Vizinhos Mais Pr√≥ximos (KNeighborsClassifier).

- Depois de importar os modelos, n√≥s vamos treinar cada uma deles utilizando a nossa base de treino. Com isso eles estar√£o
preparados para serem testados com a nossa base de teste e poderemos comparar o resultado entre os dois modelos.
""" )

# Treinando os Modelos
modelo_arvore=RandomForestClassifier()
modelo_knn=KNeighborsClassifier()

modelo_arvore.fit(x_treino, y_treino)
modelo_knn.fit(x_teste, y_teste)

st.markdown('''___''')


with st.container():
    
    st.markdown("## - Acur√°cia do Modelo")

    st.success(
      """
    - Acur√°cia e uma das m√©tricas de avalia√ß√£o que utilizamos para verificar se um modelo √© bom em rela√ß√£o a outro.
      
    - A acur√°cia √© a performance do modelo, ou seja, vai verificar quantas informa√ß√µes foram classificadas de forma correta.
     
    - Esse exemplo abaixo, vai fazer uma verifica√ß√£o de acur√°cia do modelo se ele tivesse ‚Äúchutado‚Äù todos os scores dos clientes como
    standard. Lembrando que temos 3 tipos de score: Poor, Standard e Good. (Nessa ordem, do menor para o maior). 
    
    - Veja que a acur√°cia seria de 53%. Isso quer dizer que ele acertou 53% das classifica√ß√µes que fez. S√≥ que se voc√™ analisar esse
    n√∫mero sozinho n√£o faz tanto sentido.
    
    - Por isso que quando trabalhamos em problemas de classifica√ß√£o vamos utilizar pelo menos 2 modelos para verificar qual deles
    tem o melhor resultado. E √© exatamente isso que vamos fazer no pr√≥ximo passo.    
    """ )

    contagem_score=df['score_credito'].value_counts()
    valor_porcent=(contagem_score['Standard']/sum(contagem_score))*100
    st.markdown(f'### Acur√°cia: {valor_porcent:.2f}%')
    
    st.markdown('''___''')
        
        
with st.container():

    st.markdown("## - Calculando as Previs√µes")
    
    st.success(
      """
      - Agora de fato vai ser calculado as previs√µes utilizando os modelos √Årvore de Decis√£o e o Modelo Vizinhos Mais Pr√≥ximos. 
      Para isso vamos utilizar o .predict com cada um dos modelos para fazer essa previs√£o.
      
      - Feita a previs√£o, vai ser utilizado a m√©trica de acur√°cia para verificar quanto cada um dos modelos acertou.
      
      - Como Podemos ver nos resultados abaixo, Para a √Årvore de Decis√£o tivemos uma acur√°cia de 82% enquanto que para o
      modelo Modelo Vizinhos Mais Pr√≥ximos tivemos 73% de acur√°cia.
      
      - Ent√£o para esse projeto em espec√≠fico entre os dois modelos que n√≥s temos, o modelo √Årvore de Decis√£o teve o melhor resultado.
      podemos utilizar esse modelo para prever o score dos pr√≥ximos clientes.
      
      - Claro, que n√£o vai acertar em 100% dos casos, mas uma precis√£o de 82% j√° √© um valor excelente. Com isso a empresa j√° conseguiria prever
      com uma boa acur√°cia o score dos clientes e com isso pode fazer suas decis√µes de forma mais eficiente.
      
      """)
     
    previsao_arvore=modelo_arvore.predict(x_teste)
    previsao_knn=modelo_knn.predict(x_teste.to_numpy())

    acuracia_arvore = accuracy_score(y_teste, previsao_arvore)*100 
    acuracia_knn = accuracy_score(y_teste, previsao_knn)*100 

    st.markdown(f'### Acur√°cia da √Årvore de Decis√£o: {acuracia_arvore:.2f}%')
    st.markdown(f'### Acur√°cia Modelo Vizinhos Mais Pr√≥ximos: {acuracia_knn:.2f}%')
    
    st.markdown('''___''')
    
    
with st.container():
    
    st.markdown("## - Caracter√≠sticas Importantes para Definir o Score")
    
    st.success(
    """
    - Al√©m de definir qual o modelo √© melhor para fazer a classifica√ß√£o, ainda pode ser utilizado esse mesmo modelo para verificar 
    quais as caracter√≠sticas mais importantes para definir o score de cr√©dito. Melhorando a an√°lise e mostrar para a empresa as 
    caracter√≠sticas mais importantes para definir o score do cliente.
    
    - Na Tatela podemos notar que as informa√ß√µes  **juros_empr√©stimo, mix_credito e divida_total,** s√£o caracter√≠sticas bem importantes.
    elas v√£o ajudar bastante na hora de definir o score do cliente, mais do que as outra caracter√≠sticas.
    
    - S√£o mais pontos a serem analisados e conversados para que a empresa consiga fazer uma melhor avalia√ß√£o dos seus
    clientes, com o objetivo de minimizar os clientes com um score pobre (Poor), por exemplo.
    """)
    
    # Colunas e import√¢ncia dos recursos
    colunas = list(x_teste.columns)
    importancia = pd.DataFrame(index=colunas, data=modelo_arvore.feature_importances_ * 100)

    # Adicionando t√≠tulo acima da coluna 'Caracter√≠sticas'
    importancia.index.name = 'Caracter√≠sticas'

    # Criando uma fun√ß√£o para estilizar linhas espec√≠ficas
    def destaque_cor(s):
        destaque = ['background-color: yellow' if s.name in ['juros_emprestimo', 'mix_credito', 'divida_total'] else '' for _ in s]
        return destaque

    # Aplicando a fun√ß√£o de destaque de cor ao DataFrame
    importancia_styled = importancia.style.apply(destaque_cor, axis=1)

    # Exibindo a tabela com ajustes de largura e altura
    st.dataframe(importancia_styled, width=350, height=840)
    
    st.markdown('''___''')
    
st.markdown("## - Conclus√£o")

st.success(
"""
- Esse projeto foi muito importante para mostrar como podemos fazer tratamento e an√°lise de dados e 
com isso, ser poss√≠vel treinar dois modelos de classifica√ß√£o para auxiliar na previs√£o desses dados. 
Isso ajudaria a empresa a verificar com uma acur√°cia de 82% quais os clientes que possuem um bom score e 
quais as caracter√≠sticas mais importantes para definir esse score do cliente.

- Algo bem importante e que podemos propor algumas solu√ß√µes, criar modelos de classifica√ß√£o para verificar v√°rios tipos de informa√ß√£o para
diminuir preju√≠zos e aumentar os lucros. Nesse projeto a ideia era diminuir a quantidade de clientes com um score baixo, ent√£o
foi criado um modelo para fazer uma previs√£o e ainda conseguir analisar quais os pontos importantes precisamos levar em considera√ß√£o para an√°lise do score.
""")           

st.sidebar.subheader('', divider='gray')                
st.sidebar.subheader('Powered by: Jadson N Santos')
st.sidebar.subheader('Discord: jadson')
st.sidebar.subheader('Linkedin: https://www.linkedin.com/in/jadson-nascimento-santos/')
st.sidebar.subheader('GitHub: https://github.com/JadsonDS') 
st.sidebar.subheader('Portfolio de Projetos: https://jadsonds.github.io/portfolio_projetos/')